/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.35
 * Generated at: 2019-01-16 19:44:53 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.board.rank;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import semi.member.model.vo.*;
import java.util.*;
import semi.board.rank.model.vo.*;

public final class RankingBoard_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/WEB-INF/views/common/header.jsp", Long.valueOf(1547667828748L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("semi.member.model.vo");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("semi.board.rank.model.vo");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("\r\n");
 
	Member loggedInMember = (Member)session.getAttribute("loggedInMember");

      out.write("\r\n");
      out.write("<!DOCTYPE>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>You Can't Escape.</title>\r\n");
      out.write("<link href=\"https://fonts.googleapis.com/css?family=Roboto+Slab\" rel=\"stylesheet\">\r\n");
      out.write("<link href=\"https://fonts.googleapis.com/css?family=Noto+Serif+KR\" rel=\"stylesheet\">\r\n");
      out.write("<link href=\"https://fonts.googleapis.com/css?family=Amatic+SC\" rel=\"stylesheet\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"");
      out.print(request.getContextPath() );
      out.write("/css/common/header.css\" />\r\n");
      out.write("<script src=\"");
      out.print(request.getContextPath());
      out.write("/js/jquery-3.3.1.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<header>\r\n");
      out.write("\t\t<div id=\"top\">\r\n");
      out.write("\t\t\t<div id=\"myMenu\">\r\n");
      out.write("\t\t\t");
if(loggedInMember == null) {
      out.write("\r\n");
      out.write("                <a href=\"");
      out.print(request.getContextPath());
      out.write("/member/login\">LOGIN</a>\r\n");
      out.write("\t\t\t");
}else{ 
      out.write("\r\n");
      out.write("                <a href=\"");
      out.print(request.getContextPath());
      out.write("/member/memberView?userId=");
      out.print(loggedInMember.getUserId());
      out.write("\">MY PAGE</a>\r\n");
      out.write("                &nbsp;&nbsp;\r\n");
      out.write("                <a href=\"");
      out.print(request.getContextPath());
      out.write("/member/logout\">LOGOUT</a>\r\n");
      out.write("\t\t\t");
} 
      out.write("\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<a href=\"");
      out.print(request.getContextPath());
      out.write("/home\"><div id=\"logo\">Escape, if you can.</div></a>\r\n");
      out.write("\t\t<div id=\"menu\">\r\n");
      out.write("\t\t\t<ul>\r\n");
      out.write("\t\t\t\t<li><a href=\"");
      out.print(request.getContextPath());
      out.write("/home\">HOME</a></li>\r\n");
      out.write("\t\t\t\t<li><a href=\"");
      out.print(request.getContextPath());
      out.write("/notice/noticeList\">NOTICE</a></li>\r\n");
      out.write("\t\t\t\t<li><a href=\"");
      out.print(request.getContextPath());
      out.write("/board/rank/rankingBoardList\">RANKING</a></li>\r\n");
      out.write("\t\t\t\t<li><a href=\"");
      out.print(request.getContextPath());
      out.write("/board/solve/solveBoardList\">SOLVE</a></li>\r\n");
      out.write("\t\t\t\t<li><a href=\"");
      out.print(request.getContextPath());
      out.write("/board/free/freeBoardList\">FREE</a></li>\r\n");
      out.write("\t\t\t</ul>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<div id=\"game-start\">\r\n");
      out.write("\t\t\t<button class=\"enter-game\" >ENTER GAME</button>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</header>\r\n");
      out.write("\t\r\n");
      out.write("<script>\r\n");
      out.write("$(\".enter-game\").click(function(){\r\n");
      out.write("\tvar pop;\r\n");
      out.write("\tvar url = \"");
      out.print(request.getContextPath());
      out.write("/game/gameStart?userId=");
      out.print(loggedInMember!=null?loggedInMember.getUserId():"guest");
      out.write("\";\r\n");
      out.write("\tvar status = \"width=1024px, height=678px\";\r\n");
      out.write("\tpop = sessionStorage.getItem(\"game\");\r\n");
      out.write("\t\r\n");
      out.write("\tif(pop || pop != null) {alert(\"이미 게임이 실행중입니다.\"); return;} //팝업창이 열려있는 경우 중복실행 방지.\r\n");
      out.write("\t\t\r\n");
      out.write("\tif(");
      out.print(loggedInMember==null);
      out.write("){\r\n");
      out.write("\t\tvar check = confirm(\"비로그인 시 랭킹등록이 불가합니다. 계속 진행하시겠습니까?\");\r\n");
      out.write("\t\tif(!check){return;}\r\n");
      out.write("\t}\r\n");
      out.write("\tpop = open(url, \"game\", status);\r\n");
      out.write("\tsessionStorage.setItem(\"game\", pop);\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("$(function getAdminList(){\r\n");
      out.write("\tconsole.log(\"onload function\");\r\n");
      out.write("\t");
if(loggedInMember != null){
      out.write("\r\n");
      out.write("\t\t$.ajax({\r\n");
      out.write("\t\t\turl : \"");
      out.print(request.getContextPath());
      out.write("/header\",\r\n");
      out.write("\t\t\ttype : \"post\",\r\n");
      out.write("\t\t\tdataType : \"json\",\r\n");
      out.write("\t\t\tsuccess : function(data){\r\n");
      out.write("\t\t\t\tconsole.log(data);\r\n");
      out.write("\t\t\t\tvar aTag = $(\"#adminBtn\");\r\n");
      out.write("\t\t\t\tfor(var i in data){\r\n");
      out.write("\t\t\t\t\tif(\"");
      out.print(loggedInMember.getUserId());
      out.write("\" == data[i].adminId){\r\n");
      out.write("\t\t\t\t\t\t$(\"#myMenu a:first\").before(\"<a href='");
      out.print(request.getContextPath());
      out.write("/adminMode/adminMain' id='adminBtn'>ADMIN</a>&nbsp;&nbsp;&nbsp;&nbsp;\");\r\n");
      out.write("\t\t\t\t\t}  \r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t}, error : function(jqxhr, textStatus, errorThrown){\r\n");
      out.write("\t\t\t\tconsole.log(\"ajax처리 실패!\");\r\n");
      out.write("\t\t\t\tconsole.log(jqxhr);\r\n");
      out.write("\t\t\t\tconsole.log(textStatus);\r\n");
      out.write("\t\t\t\tconsole.log(errorThrown);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t");
}
      out.write("\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("</script>");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	List<Rank> list = (List<Rank>)request.getAttribute("list");
	List<RankComment> rankCommentList = (List<RankComment>)request.getAttribute("rankCommentList");
	int totalRankComment = (int)request.getAttribute("totalRankComment");

      out.write("\r\n");
      out.write("\r\n");
      out.write("<link rel=\"stylesheet\" href=\"");
      out.print(request.getContextPath());
      out.write("/css/board/rank/ranking.css\" />\r\n");
      out.write("<link href=\"https://fonts.googleapis.com/css?family=Abril+Fatface|East+Sea+Dokdo|Fredericka+the+Great|Noto+Serif+KR|Permanent+Marker|Song+Myung\" rel=\"stylesheet\">\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("\tfunction deleteRankComment() {\r\n");
      out.write("\t\t$(\"[name=rankCommentDelFrm]\").submit();\r\n");
      out.write("\t}\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("   <h2>BEST 3</h2>\r\n");
      out.write("   \r\n");
      out.write("   <div id=\"top3\">\r\n");
      out.write("      <div id=\"top1-container\">\r\n");
      out.write("         ");
if(list == null || list.isEmpty()) { 
      out.write("\r\n");
      out.write("            <span id=\"none\">랭크에 기록된 결과가 없습니다.</span>\r\n");
      out.write("         ");
 }
         else {
      out.write("\r\n");
      out.write("         <div id=\"first\">\r\n");
      out.write("            <p id=\"label-for-grade\">1st</p>\r\n");
      out.write("            <!-- 유저 프로필 이미지 시작 -->\r\n");
      out.write("            ");
if(list.get(0).getUserprofilerenamedfile() == null || list.get(0).getUserprofilerenamedfile().isEmpty()) { 
      out.write("\r\n");
      out.write("               <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/04/Antu_im-user-offline.svg/512px-Antu_im-user-offline.svg.png\"/>\r\n");
      out.write("            ");
}
               else {
      out.write("\r\n");
      out.write("               <img src=\"");
      out.print(request.getContextPath() );
      out.write("/upload/member/");
      out.print(list.get(0).getUserprofilerenamedfile() );
      out.write("\"/>\r\n");
      out.write("            ");
 } 
      out.write("\r\n");
      out.write("               \r\n");
      out.write("            <!-- 유저 프로필 이미지 끝 -->\r\n");
      out.write("            </div>\r\n");
      out.write("            \r\n");
      out.write("            <p class=\"playerInfo\">");
      out.print(list.get(0).getGameId() );
      out.write("</p>\r\n");
      out.write("            <p class=\"playerInfo\">");
      out.print(list.get(0).getEndRuntime());
      out.write("</p>\r\n");
      out.write("            <p class=\"playerInfo\">");
      out.print(list.get(0).getGameescapedate());
      out.write("</p>\r\n");
      out.write("         \r\n");
      out.write("         ");
} 
      out.write("\r\n");
      out.write("      </div>\r\n");
      out.write("      \r\n");
      out.write("      <div id=\"top2-container\">\r\n");
      out.write("         ");
if(list == null || list.isEmpty()) { 
      out.write("\r\n");
      out.write("            <span id=\"none\">랭크에 기록된 결과가 없습니다.</span>\r\n");
      out.write("         ");
 }
         else {
      out.write("\r\n");
      out.write("         <div id=\"second\">\r\n");
      out.write("            <p id=\"label-for-grade\">2nd</p>\r\n");
      out.write("            <!-- 유저 프로필 이미지 시작 -->\r\n");
      out.write("            ");
if(list.get(1).getUserprofilerenamedfile() == null || list.get(1).getUserprofilerenamedfile().isEmpty()) { 
      out.write("\r\n");
      out.write("               <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/04/Antu_im-user-offline.svg/512px-Antu_im-user-offline.svg.png\"/>\r\n");
      out.write("            ");
}
               else {
      out.write("\r\n");
      out.write("               <img src=\"");
      out.print(request.getContextPath() );
      out.write("/upload/member/");
      out.print(list.get(1).getUserprofilerenamedfile() );
      out.write("\"/>\r\n");
      out.write("            ");
 } 
      out.write("\r\n");
      out.write("               \r\n");
      out.write("            <!-- 유저 프로필 이미지 끝 -->\r\n");
      out.write("            </div>\r\n");
      out.write("         \r\n");
      out.write("         <p class=\"playerInfo\">");
      out.print(list.get(1).getGameId() );
      out.write("</p>\r\n");
      out.write("         <p class=\"playerInfo\">");
      out.print(list.get(1).getEndRuntime());
      out.write("</p>\r\n");
      out.write("         <p class=\"playerInfo\">");
      out.print(list.get(1).getGameescapedate());
      out.write("</p>\r\n");
      out.write("         \r\n");
      out.write("         ");
} 
      out.write("\r\n");
      out.write("      </div>\r\n");
      out.write("      \r\n");
      out.write("      <div id=\"top3-container\">\r\n");
      out.write("         ");
if(list == null || list.isEmpty()) { 
      out.write("\r\n");
      out.write("            <span id=\"none\">랭크에 기록된 결과가 없습니다.</span>\r\n");
      out.write("         ");
 }
         else {
      out.write("\r\n");
      out.write("         <div id=\"third\">\r\n");
      out.write("            <p id=\"label-for-grade\">3rd</p>\r\n");
      out.write("            <!-- 유저 프로필 이미지 시작 -->\r\n");
      out.write("            ");
if(list.get(2).getUserprofilerenamedfile() == null || list.get(2).getUserprofilerenamedfile().isEmpty()) { 
      out.write("\r\n");
      out.write("               <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/04/Antu_im-user-offline.svg/512px-Antu_im-user-offline.svg.png\"/>\r\n");
      out.write("            ");
}
               else {
      out.write("\r\n");
      out.write("               <img src=\"");
      out.print(request.getContextPath() );
      out.write("/upload/member/");
      out.print(list.get(2).getUserprofilerenamedfile() );
      out.write("\"/>\r\n");
      out.write("            ");
 } 
      out.write("\r\n");
      out.write("               \r\n");
      out.write("            <!-- 유저 프로필 이미지 끝 -->\r\n");
      out.write("            </div>\r\n");
      out.write("         \r\n");
      out.write("         <p class=\"playerInfo\">");
      out.print(list.get(2).getGameId() );
      out.write("</p>\r\n");
      out.write("         <p class=\"playerInfo\">");
      out.print(list.get(2).getEndRuntime());
      out.write("</p>\r\n");
      out.write("         <p class=\"playerInfo\">");
      out.print(list.get(2).getGameescapedate());
      out.write("</p>\r\n");
      out.write("         \r\n");
      out.write("         ");
} 
      out.write("\r\n");
      out.write("   </div>\r\n");
      out.write("   \r\n");
      out.write("   <div id=\"from4to10\">\r\n");
      out.write("      <!-- 4등부터 10등까지의 테이블은 AJAX 사용하기! -->\r\n");
      out.write("      <table id=\"tbl-Rank4-10\">\r\n");
      out.write("         <tr>\r\n");
      out.write("            <th>등수</th>\r\n");
      out.write("            <th>아이디</th>\r\n");
      out.write("            <th>클리어 시간</th>\r\n");
      out.write("            <th>클리어 날짜</th>\r\n");
      out.write("         </tr>\r\n");
      out.write("         \r\n");
      out.write("         ");
 if(list == null || list.isEmpty()) { 
      out.write("\r\n");
      out.write("         \r\n");
      out.write("         <tr>\r\n");
      out.write("            <td colspan=\"4\" align=\"center\">\r\n");
      out.write("            아직 랭크에 기록된 결과가 없습니다.\r\n");
      out.write("            </td>\r\n");
      out.write("         </tr>\r\n");
      out.write("         ");
}
         else {
            for(int i=3; i<list.size(); i++) {
         
      out.write("\r\n");
      out.write("         <tr>\r\n");
      out.write("            <td>");
      out.print(i+1);
      out.write("</td>\r\n");
      out.write("            <td>");
      out.print(list.get(i).getGameId());
      out.write("</td>\r\n");
      out.write("            <td>");
      out.print(list.get(i).getEndRuntime());
      out.write("</td>\r\n");
      out.write("            <td>");
      out.print(list.get(i).getGameescapedate());
      out.write("</td>\r\n");
      out.write("         </tr>\r\n");
      out.write("         ");
 }}
      out.write("\r\n");
      out.write("      </table>\r\n");
      out.write("   </div>\r\n");
      out.write("   \r\n");
      out.write("   <!-- 댓글 시작  -->\r\n");
      out.write("   <div id=\"rankComment-container\">\r\n");
      out.write("   \t\t<h2>Reply</h2>\r\n");
      out.write("   \t\t\r\n");
      out.write("   \t\t<p class=\"warningMessage\">* 비방 및 욕설, 도배글 등은 관리자에 의해 삭제될 수 있으니 주의하시길 바랍니다. *</p>\r\n");
      out.write("   \t\t\r\n");
      out.write("   \t\t<div id=\"rankComment-editor\">\r\n");
      out.write("   \t\t\t<p>\r\n");
      out.write("   \t\t\t\t총 <span>");
      out.print(totalRankComment);
      out.write("</span>개의 댓글이 작성되었습니다.\r\n");
      out.write("   \t\t\t</p>\r\n");
      out.write("   \t\t\t\r\n");
      out.write("   \t\t\t<hr />\r\n");
      out.write("   \t\t\t\r\n");
      out.write("   \t\t\t<form action=\"");
      out.print(request.getContextPath());
      out.write("/board/rank/RankBoardCommentInsert\" name=\"rankCommentSubmitFrm\" method=\"post\">\r\n");
      out.write("   \t\t\t\t<input type=\"hidden\" name=\"rankCommentWriter\" value=\"");
      out.print(loggedInMember!=null?loggedInMember.getUserId():"");
      out.write("\" />\r\n");
      out.write("   \t\t\t\t<input type=\"hidden\" name=\"rankCommentLevel\" value=\"1\" />\r\n");
      out.write("   \t\t\t\t<input type=\"hidden\" name=\"rankCommentRef\" value=\"0\" />\r\n");
      out.write("   \t\t\t\t\r\n");
      out.write("   \t\t\t\t<textarea name=\"rankCommentContent\" cols=\"60\" rows=\"3\"></textarea>\r\n");
      out.write("   \t\t\t\t<button type=\"submit\" id=\"btn-insert\">등록</button>\r\n");
      out.write("   \t\t\t</form>\r\n");
      out.write("   \t\t\t\r\n");
      out.write("   \t\t\t<hr />\r\n");
      out.write("   \t\t\t\r\n");
      out.write("   \t\t</div>\r\n");
      out.write("   \t\t\r\n");
      out.write("   \t\t<!-- 댓글 목록 테이블 -->\r\n");
      out.write("   \t\t\r\n");
      out.write("   \t\t<table id=\"tbl-rankComment\">\r\n");
      out.write("   \t\t\t");
 for(RankComment rc : rankCommentList) {
   				if(rc.getCommentLevel() == 1) { 
      out.write("\r\n");
      out.write("   \t\t\t\t\r\n");
      out.write("   \t\t\t\t<tr class=\"rankLevel1\">\r\n");
      out.write("   \t\t\t\t\t<td>\r\n");
      out.write("   \t\t\t\t\t\t<sub class=\"rComment-Writer\">\r\n");
      out.write("   \t\t\t\t\t\t\t");
      out.print(rc.getCommentWriter());
      out.write("\r\n");
      out.write("   \t\t\t\t\t\t</sub>\r\n");
      out.write("   \t\t\t\t\t\t<sub class=\"rComment-Date\">\r\n");
      out.write("   \t\t\t\t\t\t\t");
      out.print(rc.getCommentDate());
      out.write("\r\n");
      out.write("   \t\t\t\t\t\t</sub>\r\n");
      out.write("   \t\t\t\t\t\t<br />\r\n");
      out.write("   \t\t\t\t\t\t");
      out.print(rc.getCommentContent());
      out.write("\r\n");
      out.write("   \t\t\t\t\t</td>\r\n");
      out.write("   \t\t\t\t\t<td>\r\n");
      out.write("   \t\t\t\t\t\t<button id=\"btn-reply\" value=\"");
      out.print(rc.getCommentNo());
      out.write("\">답글</button>\r\n");
      out.write("   \t\t\t\t\t\t\r\n");
      out.write("   \t\t\t\t\t\t");
 if(loggedInMember != null && (rc.getCommentWriter().equals(loggedInMember.getUserId()) || "admin123".equals(loggedInMember.getUserId()))) { 
      out.write("\r\n");
      out.write("   \t\t\t\t\t\t\t<form action=\"");
      out.print(request.getContextPath());
      out.write("/board/rank/RankBoardCommentDelete\" name=\"rankCommentDelFrm\">\r\n");
      out.write("   \t\t\t\t\t\t\t\t<input type=\"hidden\" name=\"rankCommentNo\" value=\"");
      out.print(rc.getCommentNo());
      out.write("\" />\r\n");
      out.write("   \t\t\t\t\t\t\t\t<input type=\"hidden\" name=\"rankCommentLevel\" value=\"1\" />\r\n");
      out.write("   \t\t\t\t\t\t\t\t<button type=\"submit\" id=\"btn-delete\" onclick=\"deleteRankComment();\">삭제</button>\r\n");
      out.write("   \t\t\t\t\t\t\t</form>\r\n");
      out.write("   \t\t\t\t\t\t");
} 
      out.write("\r\n");
      out.write("   \t\t\t\t\t</td>\r\n");
      out.write("   \t\t\t\t</tr>\r\n");
      out.write("   \t\t\t");
}
   				else {
      out.write("\r\n");
      out.write("   \t\t\t\t\r\n");
      out.write("   \t\t\t\t<tr class=\"rankLevel2\">\r\n");
      out.write("   \t\t\t\t\t<td>\r\n");
      out.write("   \t\t\t\t\t\t<sub class=\"rComment-Writer\">\r\n");
      out.write("   \t\t\t\t\t\t\t");
      out.print(rc.getCommentWriter());
      out.write("\r\n");
      out.write("   \t\t\t\t\t\t</sub>\r\n");
      out.write("   \t\t\t\t\t\t<sub class=\"rComment-Date\">\r\n");
      out.write("   \t\t\t\t\t\t\t");
      out.print(rc.getCommentDate());
      out.write("\r\n");
      out.write("   \t\t\t\t\t\t</sub>\r\n");
      out.write("   \t\t\t\t\t\t<br />\r\n");
      out.write("   \t\t\t\t\t\t");
      out.print(rc.getCommentContent());
      out.write("\r\n");
      out.write("   \t\t\t\t\t</td>\r\n");
      out.write("   \t\t\t\t\t\r\n");
      out.write("   \t\t\t\t\t<td>\r\n");
      out.write("   \t\t\t\t\t\t");
 if(loggedInMember != null && (rc.getCommentWriter().equals(loggedInMember.getUserId()) || "admin123".equals(loggedInMember.getUserId()))) {
      out.write("\r\n");
      out.write("   \t\t\t\t\t\t\r\n");
      out.write("   \t\t\t\t\t\t\t<form action=\"");
      out.print(request.getContextPath());
      out.write("/board/rank/RankBoardCommentDelete\" name=\"rankCommentDelFrm\">\r\n");
      out.write("   \t\t\t\t\t\t\t\t<input type=\"hidden\" name=\"rankCommentNo\" value=\"");
      out.print(rc.getCommentNo());
      out.write("\" />\r\n");
      out.write("   \t\t\t\t\t\t\t\t<input type=\"hidden\" name=\"rankCommentLevel\" value=\"2\" />\r\n");
      out.write("   \t\t\t\t\t\t\t\t<button type=\"submit\" id=\"btn-delete\" onclick=\"deleteRankComment();\">삭제</button>\r\n");
      out.write("   \t\t\t\t\t\t\t</form>\r\n");
      out.write("   \t\t\t\t\t\t");
} 
      out.write("\r\n");
      out.write("   \t\t\t\t\t</td>\r\n");
      out.write("   \t\t\t\t</tr>\r\n");
      out.write("   \t\t\t");
}} 
      out.write("\r\n");
      out.write("   \t\t</table>\r\n");
      out.write("   </div>\r\n");
      out.write("   \r\n");
      out.write("\t<script>\r\n");
      out.write("\t\t$(\"[name=rankCommentContent]\").on('click', function() {\r\n");
      out.write("\t\t\tif(");
      out.print(loggedInMember == null);
      out.write(")\r\n");
      out.write("\t\t\t\tloginAlert();\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tfunction loginAlert() {\r\n");
      out.write("\t\t\talert(\"로그인 후 이용하실 수 있습니다.\");\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t$(\"[name=rankCommentSubmitFrm]\").submit(function(e) {\r\n");
      out.write("\t\t\tif(");
      out.print(loggedInMember == null);
      out.write(") {\r\n");
      out.write("\t\t\t\tloginAlert();\r\n");
      out.write("\t\t\t\te.preventDefault();\r\n");
      out.write("\t\t\t\treturn;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t// RankCommentContent 유효성 검사!\r\n");
      out.write("\t\t\tvar len = $(\"[name=rankCommentContent]\").val().trim().length;\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tif(len == 0) {\r\n");
      out.write("\t\t\t\talert(\"댓글을 작성하세요.\");\r\n");
      out.write("\t\t\t\te.preventDefault();\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t$(\"#btn-reply\").on('click', function() {\r\n");
      out.write("\t\t\t");
 if(loggedInMember != null) { 
      out.write("\r\n");
      out.write("\t\t\t\t/* 로그인한 경우 */\r\n");
      out.write("\t\t\t\tvar tr = $(\"<tr></tr>\");\r\n");
      out.write("\t\t\t\tvar html = '<td style=\"display:none; text-align:left;\" colspan=\"2\">';\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\thtml += '<form action=\"RankBoardCommentInsert\" method=\"post\">';\r\n");
      out.write("\t\t\t\thtml += '<input type=\"hidden\" name=\"rankCommentWriter\" value=\"");
      out.print(loggedInMember.getUserId());
      out.write("\">';\r\n");
      out.write("\t\t\t\thtml += '<input type=\"hidden\" name=\"rankCommentLevel\" value=\"2\">';\r\n");
      out.write("\t\t\t\thtml += '<input type=\"hidden\" name=\"rankCommentRef\" value=\"' + $(this).val() + '\">';\r\n");
      out.write("\t\t\t\thtml += '<textarea name=\"rankCommentContent\" cols=\"60\" rows=\"3\"></textarea>';\r\n");
      out.write("\t\t\t\thtml += '<button type=\"submit\" class=\"btn-insert2\">답글</button></form></td>';\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\ttr.html(html);\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\ttr.insertAfter($(this).parent().parent()).children(\"td\").slideDown(800);\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t// 한번 실행 후 이벤트 핸들러를 제거한다.\r\n");
      out.write("\t\t\t\t$(this).off('click');\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t// 생성된 폼에 대해 submit 이벤트 핸들러를 설치한다.\r\n");
      out.write("\t\t\t\ttr.find('form').submit(function(e) {\r\n");
      out.write("\t\t\t\t\tvar len = $(this).find(\"textarea\").val().trim().length;\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\tif(len == 0) {\r\n");
      out.write("\t\t\t\t\t\te.preventDefault();\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t");
} else {
      out.write("\r\n");
      out.write("\t\t\t\t/* 로그인하지 않은 경우 */\r\n");
      out.write("\t\t\t\tloginAlert();\r\n");
      out.write("\t\t\t");
 }
      out.write("\r\n");
      out.write("\t\t});\r\n");
      out.write("\t</script>\r\n");
      out.write("   <!-- 댓글 끝 -->");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
