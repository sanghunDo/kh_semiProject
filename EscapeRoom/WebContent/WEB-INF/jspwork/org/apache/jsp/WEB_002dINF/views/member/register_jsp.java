/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.35
 * Generated at: 2019-01-16 23:51:16 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;

public final class register_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>You Can't Escape..</title>\r\n");
      out.write("<link href=\"https://fonts.googleapis.com/css?family=Noto+Serif+KR\" rel=\"stylesheet\">\r\n");
      out.write("<link href=\"https://fonts.googleapis.com/css?family=Roboto+Slab\" rel=\"stylesheet\">\r\n");
      out.write("<link href=\"https://fonts.googleapis.com/css?family=Amatic+SC\" rel=\"stylesheet\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"");
      out.print(request.getContextPath() );
      out.write("/css/member/register.css\" />\r\n");
      out.write("<script src=\"");
      out.print(request.getContextPath());
      out.write("/js/jquery-3.3.1.js\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("/* 회원가입 유효성 검사 */\r\n");
      out.write("function registerValidate(){\r\n");
      out.write("\t\r\n");
      out.write("\t// 아이디 검사\r\n");
      out.write("\tvar $userId_ = $(\"#userId_\"); // 유저 아이디\r\n");
      out.write("\tvar getUserId = RegExp(/^[a-zA-Z]+[a-zA-Z0-9]{4,11}$/); // 유저 아이디 유효성 검사\r\n");
      out.write("\t\r\n");
      out.write("\t// 비밀번호 검사\r\n");
      out.write("\tvar $userPassword_ = $(\"#userPassword_\"); // 유저 비밀번호\r\n");
      out.write("\tvar $userPassword__ = $(\"#userPassword__\"); // 비교할 유저 비밀번호\r\n");
      out.write("\tvar getUserPassword = RegExp(/^(?=.*[A-Za-z])(?=.*[0-9])(?=.*[#?!@$%^&*-]).{5,19}$/); // 유저 비밀번호 유효성 검사\r\n");
      out.write("\r\n");
      out.write("\t// 이메일 검사 \r\n");
      out.write("\tvar $userEmail = $(\"#userEmail\"); // 유저 이메일\r\n");
      out.write("\tvar getUserEmail = RegExp(/^[a-z0-9_+.-]+@([a-z0-9-]+\\.)+[a-z0-9]{2,4}$/); // 유저 이메일 유효성 검사\r\n");
      out.write("\t\r\n");
      out.write("\t// 프로필 검사\r\n");
      out.write("\tvar $userProfileOriginalFile = $(\"#userProfile\"); // 유저 프로필 사진명\r\n");
      out.write("\tvar fileExt = $userProfileOriginalFile.val().substring($userProfileOriginalFile.val().lastIndexOf(\".\") + 1); // 확장자명 구하기 위함\r\n");
      out.write("\tvar getUserProfileOriginalFile = RegExp(/jpg|jpeg|png|gif/i); // 유저 프로필 사진 유효성 검사\r\n");
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("\t// 아이디 공백 확인\r\n");
      out.write("\tif($userId_.val() ==\"\"){\r\n");
      out.write("\t\talert(\"아이디를 입력해주세요.\");\r\n");
      out.write("\t\t$userId_.focus();\r\n");
      out.write("\t\treturn false;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t// 아이디 유효성 검사\r\n");
      out.write("\tif(!getUserId.test($userId_.val())){\r\n");
      out.write("\t\talert(\"아이디는 영문자로 시작하고, 5~12자 영문자 또는 숫자를 입력해주세요.\");\r\n");
      out.write("\t\t$userId_.val(\"\");\r\n");
      out.write("\t\t$userId_.focus();\r\n");
      out.write("\t\treturn false;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t// 아이디중복검사여부 체크\r\n");
      out.write("\tvar $idValid = $(\"#idValid\").val();\r\n");
      out.write("\tif($idValid == 0){\r\n");
      out.write("\t\talert(\"아이디 중복검사해주세요.\");\r\n");
      out.write("\t\treturn false;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t// 비밀번호 공백 확인\r\n");
      out.write("\tif($userPassword_.val() == \"\"){\r\n");
      out.write("\t\talert(\"비밀번호를 입력해주세요.\");\r\n");
      out.write("\t\t$userPassword_.focus();\r\n");
      out.write("\t\treturn false;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t// 아이디와 비밀번호 같은지 확인\r\n");
      out.write("\tif($userId_.val() == $userPassword_.val()){\r\n");
      out.write("\t\talert(\"아이디와 비밀번호가 같습니다.\");\r\n");
      out.write("\t\t$userPassword_.val(\"\");\r\n");
      out.write("\t\t$userPassword_.focus();\r\n");
      out.write("\t\treturn false;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t// 비밀번호 유효성 검사\r\n");
      out.write("\tif(!getUserPassword.test($userPassword_.val())){\r\n");
      out.write("\t\talert(\"비밀번호는 영문자와 숫자, 특수 문자를 포함한 \\n6~20 자리로 입력해주세요.\\n특수문자는 '#?!@$%^&*-_'만 가능합니다.\");\r\n");
      out.write("\t\t$userPassword_.val(\"\");\r\n");
      out.write("\t\t$userPassword_.focus();\r\n");
      out.write("\t\treturn false;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t// 비밀번호 확인란 공백 확인\r\n");
      out.write("\tif($userPassword_.val() == \"\"){\r\n");
      out.write("\t\talert(\"비밀번호 확인란을 입력해주세요.\");\r\n");
      out.write("\t\t$userPassword_.focus();\r\n");
      out.write("\t\treturn false;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t// 비밀번호 일치여부 확인\r\n");
      out.write("\tif($userPassword_.val() != $userPassword__.val()){\r\n");
      out.write("\t\talert(\"비밀번호가 다릅니다.\");\r\n");
      out.write("\t\t$userPassword_.val(\"\");\r\n");
      out.write("\t\t$userPassword__.val(\"\");\r\n");
      out.write("\t\t$userPassword_.focus();\r\n");
      out.write("\t\treturn false;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t// 이메일 공백 확인\r\n");
      out.write("\tif($userEmail.val() == \"\"){\r\n");
      out.write("\t\talert(\"이메일을 입력해주세요.\");\r\n");
      out.write("\t\t$userEmail.focus();\r\n");
      out.write("\t\treturn false;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t// 이메일 유효성 검사\r\n");
      out.write("\tif(!getUserEmail.test($userEmail.val())){\r\n");
      out.write("\t\talert(\"이메일 형식에 맞게 입력해주세요.\");\r\n");
      out.write("\t\t$userEmail.val(\"\");\r\n");
      out.write("\t\t$userEmail.focus();\r\n");
      out.write("\t\treturn false;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t// 프로필사진 유효성 검사\r\n");
      out.write("\tif(!getUserProfileOriginalFile.test(fileExt) && $userProfileOriginalFile.val().length > 0){\r\n");
      out.write("\t\talert(\"첨부파일은 jpg, jpeg, png, gif로 된 이미지만 가능합니다.\");\r\n");
      out.write("\t\treturn false;\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\treturn true;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function checkIdDuplicate(){\r\n");
      out.write("\tvar getUserId = RegExp(/^[a-zA-Z]+[a-zA-Z0-9]{4,11}$/); // 유저 아이디 유효성 검사\r\n");
      out.write("\t// 아이디 중복검사폼 전송\r\n");
      out.write("\tvar $userId = $(\"#userId_\").val();\r\n");
      out.write("\tif($userId == \"\"){\r\n");
      out.write("\t\talert(\"아이디를 입력해주세요.\");\r\n");
      out.write("\t\treturn;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tif(!getUserId.test($userId)){\r\n");
      out.write("\t\talert(\"아이디는 영문자로 시작하고, 5~12자 영문자 또는 숫자를 입력해주세요.\");\r\n");
      out.write("\t\treturn;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t// 팝업창을 target으로 폼전송\r\n");
      out.write("\tvar target = \"checkIdDuplicate\";\r\n");
      out.write("\t\r\n");
      out.write("\t// 첫 번째 인자인 url은 생략, form의 action값이 이를 대신한다.\r\n");
      out.write("\tvar popup = open(\"\", target, \"left=300px, top=100px, width=450px, height=150px\");\r\n");
      out.write("\t\r\n");
      out.write("\tcheckIdDuplicateFrm.userId.value = $userId;\r\n");
      out.write("\tconsole.log(\"userId@checkIdDuplicate()@register.jsp = \", $userId);\r\n");
      out.write("\t\r\n");
      out.write("\t// 폼의 대상을 작성한 popup을 가리키게 한다. 이때 이용하는게 popup창의 이름(target)\r\n");
      out.write("\tcheckIdDuplicateFrm.target = target;\r\n");
      out.write("\tcheckIdDuplicateFrm.submit();\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function checkEmailDuplicate(){\r\n");
      out.write("\tvar getUserEmail = RegExp(/^[a-z0-9_+.-]+@([a-z0-9-]+\\.)+[a-z0-9]{2,4}$/); // 유저 이메일 유효성 검사\r\n");
      out.write("\t// 이메일 중복검사폼 전송\r\n");
      out.write("\tvar $userEmail = $(\"#userEmail\").val(); // 유저 이메일\r\n");
      out.write("\t// 이메일 공백 확인\r\n");
      out.write("\tif($userEmail == \"\"){\r\n");
      out.write("\t\talert(\"이메일을 입력해주세요.\");\r\n");
      out.write("\t\treturn;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t// 이메일 유효성 검사\r\n");
      out.write("\tif(!getUserEmail.test($userEmail)){\r\n");
      out.write("\t\talert(\"이메일 형식에 맞게 입력해주세요.\");\r\n");
      out.write("\t\treturn;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t// 팝업창을 target으로 폼전송\r\n");
      out.write("\tvar target = \"checkEmailDuplicate\";\r\n");
      out.write("\t\r\n");
      out.write("\t// 첫 번째 인자인 url은 생략, form의 action값이 이를 대신한다.\r\n");
      out.write("\tvar popup = open(\"\", target, \"left=300px, top=100px, width=450px, height=190px\");\r\n");
      out.write("\t\r\n");
      out.write("\tcheckEmailDuplicateFrm.userEmail.value = $userEmail;\r\n");
      out.write("\tconsole.log(\"userEmail@checkEmailDuplicate()@register.jsp = \", $userEmail);\r\n");
      out.write("\t\r\n");
      out.write("\t// 폼의 대상을 작성한 popup을 가리키게 한다. 이때 이용하는게 popup창의 이름(target)\r\n");
      out.write("\tcheckEmailDuplicateFrm.target = target;\r\n");
      out.write("\tcheckEmailDuplicateFrm.submit();\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("<script>\r\n");
      out.write("    $(function(){\r\n");
      out.write("        $(\"#userProfile\").on('change', function(){\r\n");
      out.write("            readURL(this);\r\n");
      out.write("        });\r\n");
      out.write("   });\r\n");
      out.write("\r\n");
      out.write("   function readURL(input){\r\n");
      out.write("       if(input.files && input.files[0]){\r\n");
      out.write("           var reader = new FileReader();\r\n");
      out.write("\r\n");
      out.write("           reader.onload = function(e){\r\n");
      out.write("               $('#profilePre').attr('src', e.target.result);\r\n");
      out.write("           }\r\n");
      out.write("\r\n");
      out.write("           reader.readAsDataURL(input.files[0]);\r\n");
      out.write("       }\r\n");
      out.write("   }\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<form action=\"");
      out.print(request.getContextPath());
      out.write("/member/checkIdDuplicate\" method=\"POST\"\r\n");
      out.write("\t  name=\"checkIdDuplicateFrm\">\r\n");
      out.write("\t  <input type=\"hidden\" name=\"userId\"/>\r\n");
      out.write("</form>\r\n");
      out.write("<form action=\"");
      out.print(request.getContextPath());
      out.write("/member/checkEmailDuplicate\" method=\"POST\"\r\n");
      out.write("\t  name=\"checkEmailDuplicateFrm\">\r\n");
      out.write("\t  <input type=\"hidden\" name=\"userEmail\"/>\r\n");
      out.write("</form>\r\n");
      out.write("<div id=\"logo\" onclick=\"location.href='");
      out.print(request.getContextPath());
      out.write("/home'\">Escape, if you can.</div>\r\n");
      out.write("<section id=\"register-Container\">\r\n");
      out.write("\t<h1>HELLO, STRANGER.</h1>\r\n");
      out.write("\t<form action=\"");
      out.print(request.getContextPath());
      out.write("/member/memberRegisterEnd\" method=\"POST\" \r\n");
      out.write("\t\t  name=\"memberRegisterFrm\" onsubmit=\"return registerValidate();\" enctype=\"multipart/form-data\">\r\n");
      out.write("\t\t<table id=\"tbl-Register\">\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td><input type=\"text\" name=\"userId\" id=\"userId_\" placeholder=\"아이디를 입력하세요.\" required></td>\r\n");
      out.write("\t\t\t\t<td><input type=\"button\" id=\"id-check\" value=\"확인\" onclick=\"checkIdDuplicate();\"></td>\r\n");
      out.write("\t\t\t\t\t<!-- 검사여부 알려주는 태그 -->\r\n");
      out.write("\t\t\t\t<td><input type=\"hidden\" name=\"idRegister\" id=\"idRegister\" value=\"0\"></td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td>\r\n");
      out.write("\t\t\t\t\t<input type=\"password\" name=\"userPassword\" id=\"userPassword_\" placeholder=\"비밀번호를 입력하세요.\" required />\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td>\r\n");
      out.write("\t\t\t\t\t<input type=\"password\" id=\"userPassword__\" placeholder=\"비밀번호를 한번 더 입력하세요.\" required />\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td>\r\n");
      out.write("\t\t\t\t\t<input type=\"email\" name=\"userEmail\" id=\"userEmail\"\r\n");
      out.write("\t\t\t\t\t\tplaceholder=\"이메일을 입력하세요. 예) escape@gmail.com\" required />\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t<td><input type=\"button\" id=\"email-check\" value=\"확인\" onclick=\"checkEmailDuplicate();\"/></td>\r\n");
      out.write("\t\t\t\t<td><input type=\"hidden\" name=\"emailRegister\" id=\"emailRegister\" value=\"0\"/></td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td>프로필 사진</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td><input type=\"file\" name=\"userProfile\" id=\"userProfile\"\r\n");
      out.write("\t\t\t\t\taccept=\"image/jpg, image/jpeg, image/png, image/gif\"></td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td>\r\n");
      out.write("\t\t\t\t\t<div id=\"profile-Container\">\r\n");
      out.write("\t\t\t\t\t\t <img width=\"100px\" height=\"100px\" id=\"profilePre\" src=\"");
      out.print(request.getContextPath());
      out.write("/images/nonProfile.png\">\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t</table>\r\n");
      out.write("\t\t<input type=\"submit\" id=\"register-Btn\" value=\"SIGN UP\"> \r\n");
      out.write("\t</form>\r\n");
      out.write("</section>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
